import React from 'react';

const ThreeMockLoginButtons = () => {
  // Independent state for each button
  const [adminState, setAdminState] = React.useState({ isLoading: false, message: '' });
  const [userState, setUserState] = React.useState({ isLoading: false, message: '' });
  const [guestState, setGuestState] = React.useState({ isLoading: false, message: '' });

  // Independent click handlers
  const handleAdminClick = async () => {
    setAdminState({ isLoading: true, message: '' });
    
    // Mock login delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    setAdminState({ 
      isLoading: false, 
      message: 'Mocking Admin Login - Authentication Complete!' 
    });
    
    // Clear message after 3 seconds
    setTimeout(() => {
      setAdminState(prev => ({ ...prev, message: '' }));
    }, 3000);
  };

  const handleUserClick = async () => {
    setUserState({ isLoading: true, message: '' });
    
    await new Promise(resolve => setTimeout(resolve, 1200));
    
    setUserState({ 
      isLoading: false, 
      message: 'Mocking User Login - Access Granted!' 
    });
    
    setTimeout(() => {
      setUserState(prev => ({ ...prev, message: '' }));
    }, 3000);
  };

  const handleGuestClick = async () => {
    setGuestState({ isLoading: true, message: '' });
    
    await new Promise(resolve => setTimeout(resolve, 800));
    
    setGuestState({ 
      isLoading: false, 
      message: 'Mocking Guest Login - Session Started!' 
    });
    
    setTimeout(() => {
      setGuestState(prev => ({ ...prev, message: '' }));
    }, 3000);
  };

  // Button component for consistency
  const MockLoginButton = ({ 
    {id} : {id:any}, 
    {onClick} : {onClick:any}, 
    {isLoading} : {isLoading:any}, 
    {message} : {message:any}, 
    {defaultText} : {defaultText:any}, 
    {loadingText} : {loadingText:any}, 
    {bgGradient} : {bgGradient:any}, 
    {icon} : {icon:any} 
  }) => (
    <div className="text-center">
      <div className={`bg-gradient-to-br ${bgGradient} w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg`}>
        <span className="text-3xl">{icon}</span>
      </div>
      
      <button
        id={id}
        onClick={onClick}
        disabled={isLoading}
        className={`
          w-full max-w-xs py-4 px-8 rounded-xl font-bold text-white 
          transition-all duration-300 transform hover:scale-105 active:scale-95 
          shadow-lg mb-4
          ${isLoading 
            ? 'cursor-not-allowed transform-none shadow-none opacity-70' 
            : 'hover:shadow-2xl'
          }
          bg-gradient-to-r ${bgGradient.replace('from-', 'from-').replace('to-', 'to-').replace('-100', '-600').replace('-200', '-700')}
        `}
      >
        {isLoading ? (
          <span className="flex items-center justify-center">
            <span className="animate-spin mr-2">‚è≥</span>
            {loadingText}
          </span>
        ) : (
          defaultText
        )}
      </button>
      
      {message && (
        <div className="bg-green-50 text-green-700 border-2 border-green-200 p-3 rounded-xl text-sm font-semibold max-w-xs mx-auto animate-fade-in">
          {message}
        </div>
      )}
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-cyan-50 py-12">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h1 className="text-5xl font-black text-gray-800 mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Independent Mock Logins
          </h1>
          <p className="text-gray-600 text-xl font-medium">
            Three separate buttons with independent state management
          </p>
          <div className="w-24 h-1 bg-gradient-to-r from-blue-500 to-purple-500 mx-auto mt-4 rounded-full"></div>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-10 max-w-6xl mx-auto">
          
          {/* Admin Mock Login */}
          <div className="bg-white p-8 rounded-2xl shadow-xl border border-gray-100 transition-all duration-300 hover:shadow-2xl hover:-translate-y-1">
            <h2 className="text-2xl font-bold text-red-600 mb-8 text-center">Admin Portal</h2>
            
            <MockLoginButton
              id="admin-login-button"
              onClick={handleAdminClick}
              isLoading={adminState.isLoading}
              message={adminState.message}
              defaultText="Login Style 1"
              loadingText="Authenticating..."
              bgGradient="from-red-100 to-red-200"
              icon="üîê"
            />
          </div>

          {/* User Mock Login */}
          <div className="bg-white p-8 rounded-2xl shadow-xl border border-gray-100 transition-all duration-300 hover:shadow-2xl hover:-translate-y-1">
            <h2 className="text-2xl font-bold text-blue-600 mb-8 text-center">User Portal</h2>
            
            <MockLoginButton
              id="user-login-button"
              onClick={handleUserClick}
              isLoading={userState.isLoading}
              message={userState.message}
              defaultText="Login Style 2"
              loadingText="Signing In..."
              bgGradient="from-blue-100 to-blue-200"
              icon="üë•"
            />
          </div>

          {/* Guest Mock Login */}
          <div className="bg-white p-8 rounded-2xl shadow-xl border border-gray-100 transition-all duration-300 hover:shadow-2xl hover:-translate-y-1">
            <h2 className="text-2xl font-bold text-green-600 mb-8 text-center">Guest Access</h2>
            
            <MockLoginButton
              id="guest-login-button"
              onClick={handleGuestClick}
              isLoading={guestState.isLoading}
              message={guestState.message}
              defaultText="Login Style 3"
              loadingText="Connecting..."
              bgGradient="from-green-100 to-green-200"
              icon="üåü"
            />
          </div>
        </div>
        
        {/* Technical Details Panel */}
        <div className="mt-16 max-w-4xl mx-auto">
          <div className="bg-white p-8 rounded-2xl shadow-xl border border-gray-100">
            <h3 className="text-2xl font-bold text-gray-800 mb-4 text-center">
              üéØ Independent Button Architecture
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-gray-600">
              <div>
                <h4 className="font-semibold text-gray-800 mb-2">Unique Button IDs:</h4>
                <ul className="space-y-1 font-mono text-xs bg-gray-50 p-3 rounded">
                  <li>‚Ä¢ admin-login-button</li>
                  <li>‚Ä¢ user-login-button</li>
                  <li>‚Ä¢ guest-login-button</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold text-gray-800 mb-2">Independent Features:</h4>
                <ul className="space-y-1">
                  <li>‚Ä¢ Separate React state hooks</li>
                  <li>‚Ä¢ Individual click handlers</li>
                  <li>‚Ä¢ Independent loading states</li>
                  <li>‚Ä¢ Isolated message display</li>
                </ul>
              </div>
            </div>
            <div className="mt-4 p-4 bg-blue-50 rounded-lg">
              <p className="text-blue-700 text-sm font-medium">
                üí° Perfect for handoff: Each button operates completely independently with unique IDs and no shared state conflicts!
              </p>
            </div>
          </div>
        </div>
      </div>
      
      <style jsx>{`
        @keyframes fade-in {
          from { opacity: 0; transform: translateY(-10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade-in {
          animation: fade-in 0.3s ease-out;
        }
      `}</style>
    </div>
  );
};

export default ThreeMockLoginButtons;